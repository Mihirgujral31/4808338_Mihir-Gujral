#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX 100000

int heap[MAX];
int size = 0;

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void heap_insert(int val) {
    heap[size] = val;
    int i = size;
    size++;

    while (i > 0 && heap[(i - 1) / 2] > heap[i]) {
        swap(&heap[i], &heap[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

void heapify(int i) {
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    int smallest = i;

    if (left < size && heap[left] < heap[smallest]) smallest = left;
    if (right < size && heap[right] < heap[smallest]) smallest = right;

    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        heapify(smallest);
    }
}

void heap_delete(int val) {
    int i;
    for (i = 0; i < size; i++) {
        if (heap[i] == val) break;
    }

    if (i == size) return; 
    heap[i] = heap[size - 1];
    size--;

    if (i > 0 && heap[i] < heap[(i - 1) / 2]) {
        while (i > 0 && heap[(i - 1) / 2] > heap[i]) {
            swap(&heap[i], &heap[(i - 1) / 2]);
            i = (i - 1) / 2;
        }
    } else {
        heapify(i);
    }
}

int heap_min() {
    if (size == 0) return INT_MAX;
    return heap[0];
}

int main() {
    int Q;
    scanf("%d", &Q);

    while (Q--) {
        int type, v;
        scanf("%d", &type);
        if (type == 1) {
            scanf("%d", &v);
            heap_insert(v);
        } else if (type == 2) {
            scanf("%d", &v);
            heap_delete(v);
        } else if (type == 3) {
            printf("%d\n", heap_min());
        }
    }
    return 0;
}
