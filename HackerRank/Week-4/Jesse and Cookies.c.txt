#include <stdio.h>
#include <stdlib.h>

#define MAXN 100000

int heap[MAXN];
int heap_size = 0;

void swap(int *a, int *b) {
    int t = *a;
    *a = *b;
    *b = t;
}

void heapify_down(int i) {
    int left = 2 * i + 1, right = 2 * i + 2, smallest = i;
    if (left < heap_size && heap[left] < heap[smallest]) smallest = left;
    if (right < heap_size && heap[right] < heap[smallest]) smallest = right;
    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        heapify_down(smallest);
    }
}

void heapify_up(int i) {
    while (i > 0 && heap[(i - 1) / 2] > heap[i]) {
        swap(&heap[i], &heap[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

void heap_push(int val) {
    heap[heap_size] = val;
    heapify_up(heap_size);
    heap_size++;
}

int heap_pop() {
    if (heap_size <= 0) return -1;
    int root = heap[0];
    heap[0] = heap[heap_size - 1];
    heap_size--;
    heapify_down(0);
    return root;
}

int heap_top() {
    return heap[0];
}

int main() {
    int n, k;
    scanf("%d %d", &n, &k);

    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        heap_push(x);
    }

    int ops = 0;
    while (heap_size > 0 && heap_top() < k) {
        if (heap_size < 2) { 
            printf("-1\n");
            return 0;
        }
        int least = heap_pop();
        int second = heap_pop();
        int new_cookie = least + 2 * second;
        heap_push(new_cookie);
        ops++;
    }

    printf("%d\n", ops);
    return 0;
}
